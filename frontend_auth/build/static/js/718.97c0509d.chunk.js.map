{"version":3,"file":"static/js/718.97c0509d.chunk.js","mappings":"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","sources":["services/solanaService.ts","components/VideoComponent.tsx","services/apiserver.ts","components/RewardModal.tsx","pages/SquatChallenge.tsx","hooks/useApiCall.ts"],"sourcesContent":["import { Connection, PublicKey, Transaction, SystemProgram, sendAndConfirmTransaction } from '@solana/web3.js';\n\n// ✅ Solana 네트워크 설정 (Devnet, Testnet, Mainnet 선택 가능)\nconst SOLANA_NETWORK = process.env.REACT_APP_SOLANA_NETWORK || 'https://api.devnet.solana.com';\nconst connection = new Connection(SOLANA_NETWORK, 'confirmed');\n\n// ✅ 스마트 컨트랙트 (프로그램) ID (Solana에 배포한 프로그램의 ID를 입력해야 함)\nconst PROGRAM_ID = new PublicKey('YourProgramIDHere');\n\n// ✅ Solana 트랜잭션을 생성하고 블록체인에 저장하는 함수\nexport const saveSquatDataOnChain = async (wallet: any, squatCount: number) => {\n  if (!wallet || !wallet.publicKey) {\n    throw new Error('지갑이 연결되지 않았습니다.');\n  }\n\n  try {\n    const userPublicKey = new PublicKey(wallet.publicKey);\n    const instructionData = Buffer.from(\n      JSON.stringify({ squatCount, timestamp: Date.now() }) // ✅ 운동 데이터를 JSON 형태로 변환\n    );\n\n    const transaction = new Transaction().add(\n      SystemProgram.transfer({\n        fromPubkey: userPublicKey,\n        toPubkey: PROGRAM_ID, // ✅ 스마트 컨트랙트 주소로 데이터 전송\n        lamports: 0, // ✅ 데이터 저장이므로 SOL 전송 없음\n      })\n    );\n\n    // ✅ 사용자의 지갑을 통해 트랜잭션 서명 및 전송\n    const signature = await wallet.signAndSendTransaction(transaction);\n    console.log(`✅ 트랜잭션 성공! 조회 링크: https://explorer.solana.com/tx/${signature}?cluster=devnet`);\n    \n    return signature;\n  } catch (error) {\n    console.error('❌ Solana 트랜잭션 실패:', error);\n    throw error;\n  }\n};\n","import React, { useRef, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport * as poseDetection from '@tensorflow-models/pose-detection';\n\nconst VideoContainer = styled.div`\n  width: 640px;\n  height: 480px;\n  position: relative;\n  overflow: hidden;\n  border-radius: 10px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n`;\n\nconst Video = styled.video`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`;\n\nconst Canvas = styled.canvas`\n  position: absolute;\n  top: 0;\n  left: 0;\n`;\n\nconst SquatCounter = styled.div`\n  position: absolute;\n  top: 10px;\n  left: 50%;\n  transform: translateX(-50%);\n  background: rgba(0, 0, 0, 0.7);\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  font-size: 18px;\n  font-weight: bold;\n`;\n\nconst SQUAT_DOWN_ANGLE = 110; // ✅ 스쿼트 감지 기준 (앉은 자세)\nconst SQUAT_UP_ANGLE = 160; // ✅ 스쿼트 감지 기준 (서 있는 자세)\nconst SQUAT_DELAY = 800; // ✅ 최소 스쿼트 간격 (ms) - 너무 빠른 반복 감지 방지\n\ninterface VideoComponentProps {\n  onPoseDetected: (pose: { isSquatting: boolean }) => void;\n}\n\nconst VideoComponent: React.FC<VideoComponentProps> = ({ onPoseDetected }) => {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [isSquatting, setIsSquatting] = useState(false);\n  const [squatCount, setSquatCount] = useState(0);\n  const [lastSquatTime, setLastSquatTime] = useState<number>(0);\n\n  useEffect(() => {\n    let detector: poseDetection.PoseDetector;\n\n    const setupCamera = async () => {\n      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n      }\n    };\n\n    const setupPoseDetection = async () => {\n      detector = await poseDetection.createDetector(poseDetection.SupportedModels.MoveNet);\n    };\n\n    const detectPose = async () => {\n      if (!videoRef.current || !detector) return;\n\n      const poses = await detector.estimatePoses(videoRef.current);\n      if (poses.length > 0) {\n        const keypoints = poses[0].keypoints;\n        const kneeAngle = calculateKneeAngle(keypoints);\n        handleSquatDetection(kneeAngle);\n      }\n      requestAnimationFrame(detectPose);\n    };\n\n    setupCamera();\n    setupPoseDetection().then(detectPose);\n\n    return () => {\n      if (videoRef.current && videoRef.current.srcObject) {\n        const tracks = (videoRef.current.srcObject as MediaStream).getTracks();\n        tracks.forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  const calculateKneeAngle = (keypoints: poseDetection.Keypoint[]) => {\n    const hip = keypoints.find((kp: poseDetection.Keypoint) => kp.name === 'left_hip');\n    const knee = keypoints.find((kp: poseDetection.Keypoint) => kp.name === 'left_knee');\n    const ankle = keypoints.find((kp: poseDetection.Keypoint) => kp.name === 'left_ankle');\n  \n    if (!hip || !knee || !ankle) return 180;\n  \n    return calculateAngle(hip, knee, ankle);\n  };\n  \n\n  const calculateAngle = (p1: any, p2: any, p3: any) => {\n    const radian = Math.atan2(p3.y - p2.y, p3.x - p2.x) - Math.atan2(p1.y - p2.y, p1.x - p2.x);\n    let angle = Math.abs((radian * 180) / Math.PI);\n    if (angle > 180) angle = 360 - angle;\n    return angle;\n  };\n\n  const handleSquatDetection = (kneeAngle: number) => {\n    const now = Date.now();\n    if (kneeAngle <= SQUAT_DOWN_ANGLE && !isSquatting) {\n      setIsSquatting(true);\n    } else if (kneeAngle >= SQUAT_UP_ANGLE && isSquatting) {\n      if (now - lastSquatTime >= SQUAT_DELAY) {\n        setSquatCount(prev => prev + 1);\n        setLastSquatTime(now);\n        onPoseDetected({ isSquatting: false });\n      }\n      setIsSquatting(false);\n    }\n  };\n\n  return (\n    <VideoContainer>\n      <Video ref={videoRef} autoPlay playsInline />\n      <Canvas ref={canvasRef} width={640} height={480} />\n      <SquatCounter>스쿼트 횟수: {squatCount}</SquatCounter>\n    </VideoContainer>\n  );\n};\n\nexport default VideoComponent;\n","import { apiCall } from './apiService';\n\n// SquatStats 인터페이스 정의\nexport interface SquatStats {\n  totalCount: number; // 전체 스쿼트 수\n  todayCount: number; // 오늘의 스쿼트 수\n}\n// 스쿼트 챌린지 데이터 저장\nexport const saveSquatSession = async (sessionData: {\n  count: number;\n  startTime: number;\n  endTime: number;\n  squatTimes: number[];\n}) => {\n  return await apiCall('/squats/session', 'POST', sessionData);\n};\n\n// 사용자의 스쿼트 통계 가져오기\nexport const getUserSquatStats = async (): Promise<SquatStats> => {\n  return await apiCall<SquatStats>('/squats/stats', 'GET');\n};\n\n// 보상 청구하기\nexport const claimReward = async () => {\n  return await apiCall('/rewards/claim', 'POST');\n};\n\n// 진행 상황 저장하기\nexport const saveProgress = async () => {\n  // 진행 상황을 저장하는 로직을 구현합니다.\n  return await apiCall('/progress/save', 'POST');\n};\n\nexport const saveGoal = async (goal: number) => {\n  return await apiCall('/goal/save', \"POST\", { goal });\n};\n\nexport const getDashboardData = async (): Promise<Partial<SquatStats>> => {\n  return await apiCall('/dashboard', 'GET');\n};\n\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useApiCall } from '../hooks/useApiCall';\nimport { saveProgress } from '../services/apiserver';\n\nconst ModalOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ModalContent = styled.div`\n  background-color: white;\n  padding: 30px;\n  border-radius: 10px;\n  text-align: center;\n  max-width: 400px;\n`;\n\nconst Title = styled.h2`\n  color: #4caf50;\n  margin-bottom: 20px;\n`;\n\nconst Message = styled.p`\n  margin-bottom: 20px;\n  font-size: 18px;\n`;\n\nconst Button = styled.button`\n  padding: 10px 20px;\n  margin: 0 10px;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n\n  &:hover {\n    opacity: 0.8;\n  }\n`;\n\nconst CloseButton = styled(Button)`\n  background-color: #f44336;\n  color: white;\n`;\n\nconst SaveButton = styled(Button)`\n  background-color: #4caf50;\n  color: white;\n`;\n\ninterface RewardModalProps {\n  onClose: () => void;\n  onSave: () => Promise<void>; // onSave 속성 추가\n}\n  \n  const RewardModal: React.FC<RewardModalProps> = ({ onClose }) => {\n    const { callApi, loading, error } = useApiCall(saveProgress);\n  \n    const handleSave = async () => {\n      try {\n        await callApi();\n        onClose();\n      } catch (err) {\n        console.error('Failed to save progress:', err);\n      }\n    };\n  \n    return (\n      <ModalOverlay>\n        <ModalContent>\n          <Title>Congratulations! 🎉</Title>\n          <Message>You've reached your daily squat goal!</Message>\n          <SaveButton onClick={handleSave} disabled={loading}>\n            {loading ? 'Saving...' : 'Save Progress'}\n          </SaveButton>\n          <CloseButton onClick={onClose}>Close</CloseButton>\n          {error && <ErrorMessage>Error: {error}</ErrorMessage>}\n        </ModalContent>\n      </ModalOverlay>\n    );\n  };\n  \n  const ErrorMessage = styled.p`\n    color: red;\n    margin-top: 10px;\n  `;\n  \n  export default RewardModal;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../store';\nimport { updateSquatCount } from '../store/squatSlice';\nimport { saveSquatDataOnChain } from '../services/solanaService';\nimport VideoComponent from '../components/VideoComponent';\nimport RewardModal from '../components/RewardModal';\nimport { useWallet } from '@solana/wallet-adapter-react';\n\nconst Container = styled.div`\n  max-width: 600px;\n  margin: 20px auto;\n  padding: 20px;\n  background: white;\n  border-radius: 10px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  text-align: center;\n`;\n\nconst Title = styled.h1`\n  color: ${props => props.theme.colors.primary};\n  margin-bottom: 20px;\n`;\n\nconst SquatChallenge: React.FC = () => {\n  const dispatch = useDispatch();\n  const wallet = useWallet(); // ✅ useWallet()을 컴포넌트 내부에서 호출 (오류 해결)\n  const { todayCount, dailyGoal } = useSelector((state: RootState) => state.squats);\n  const [showReward, setShowReward] = useState(false);\n\n  const handlePoseDetected = async ({ isSquatting }: { isSquatting: boolean }) => {\n    if (!isSquatting) {\n      const newCount = todayCount + 1;\n      dispatch(updateSquatCount(1)); // ✅ Redux 상태 업데이트\n\n      // ✅ 10회마다 Solana 블록체인에 저장\n      if (newCount % 10 === 0) {\n        try {\n          if (!wallet || !wallet.publicKey) {\n            alert('❌ 지갑이 연결되지 않았습니다. 블록체인 저장이 불가능합니다.');\n            return;\n          }\n\n          const txSignature = await saveSquatDataOnChain(wallet.publicKey.toString(), newCount);\n          console.log(`✅ 블록체인 저장 완료: ${txSignature}`);\n        } catch (error) {\n          console.error('❌ 블록체인 저장 실패:', error);\n        }\n      }\n\n      // ✅ 목표 달성 시 보상 화면 표시\n      if (newCount >= dailyGoal) {\n        setShowReward(true);\n      }\n    }\n  };\n\n  return (\n    <Container>\n      <Title>🏋️‍♂️ 스쿼트 챌린지</Title>\n      <VideoComponent onPoseDetected={handlePoseDetected} />\n      {showReward && <RewardModal onClose={() => setShowReward(false)} onSave={async () => console.log('보상 저장!')} />}\n    </Container>\n  );\n};\n\nexport default SquatChallenge;\n","import { useState } from 'react';\n\nexport function useApiCall<T>(apiFunction: (...args: any[]) => Promise<T>) {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const callApi = async (...args: any[]): Promise<T> => {\n    setLoading(true);\n    try {\n      const result = await apiFunction(...args);\n      return result;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { callApi, loading, error };\n}\n"],"names":["SOLANA_NETWORK","process","REACT_APP_SOLANA_NETWORK","PROGRAM_ID","Connection","PublicKey","VideoContainer","styled","div","Video","video","Canvas","canvas","SquatCounter","_ref","onPoseDetected","videoRef","useRef","canvasRef","isSquatting","setIsSquatting","useState","squatCount","setSquatCount","lastSquatTime","setLastSquatTime","useEffect","detector","detectPose","async","current","poses","estimatePoses","length","keypoints","kneeAngle","calculateKneeAngle","handleSquatDetection","requestAnimationFrame","navigator","mediaDevices","getUserMedia","stream","srcObject","setupCamera","poseDetection","MoveNet","setupPoseDetection","then","getTracks","forEach","track","stop","hip","find","kp","name","knee","ankle","calculateAngle","p1","p2","p3","radian","Math","atan2","y","x","angle","abs","PI","now","Date","prev","_jsxs","children","_jsx","ref","autoPlay","playsInline","width","height","saveProgress","apiCall","ModalOverlay","ModalContent","Title","h2","Message","p","Button","button","CloseButton","SaveButton","ErrorMessage","onClose","callApi","loading","error","useApiCall","onClick","err","console","disabled","Container","h1","props","theme","colors","primary","SquatChallenge","dispatch","useDispatch","wallet","useWallet","todayCount","dailyGoal","useSelector","state","squats","showReward","setShowReward","VideoComponent","newCount","updateSquatCount","publicKey","alert","txSignature","Error","userPublicKey","transaction","Buffer","from","JSON","stringify","timestamp","Transaction","add","SystemProgram","transfer","fromPubkey","toPubkey","lamports","signature","signAndSendTransaction","log","saveSquatDataOnChain","toString","RewardModal","onSave","apiFunction","setLoading","setError","arguments","message"],"sourceRoot":""}