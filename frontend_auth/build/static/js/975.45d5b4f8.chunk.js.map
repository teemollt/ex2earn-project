{"version":3,"file":"static/js/975.45d5b4f8.chunk.js","mappings":"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","sources":["pages/Dashboard.tsx","hooks/useApiCall.ts"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../store';\nimport { setDailyGoal, setDashboardData } from '../store/squatSlice';\nimport { getDashboardData } from '../services/apiService';\nimport { useApiCall } from '../hooks/useApiCall';\nimport ProgressBar from '../components/ProgressBar';\n\nconst Container = styled.div`\n  max-width: 600px;\n  margin: 20px auto;\n  padding: 20px;\n  background: white;\n  border-radius: 10px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  text-align: center;\n`;\n\nconst Title = styled.h1`\n  color: ${props => props.theme.colors.primary};\n  margin-bottom: 20px;\n`;\n\nconst Info = styled.p`\n  font-size: 1.1em;\n  color: ${props => props.theme.colors.text};\n  margin-bottom: 15px;\n`;\n\nconst Input = styled.input`\n  padding: 8px;\n  font-size: 1em;\n  width: 80px;\n  margin-left: 10px;\n  border: 1px solid ${props => props.theme.colors.primary};\n  border-radius: 5px;\n  text-align: center;\n`;\n\nconst Button = styled.button`\n  background-color: ${props => props.theme.colors.primary};\n  color: white;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-top: 10px;\n  \n  &:hover {\n    background-color: ${props => props.theme.colors.primaryHover};\n  }\n`;\n\nconst Dashboard: React.FC = () => {\n  const dispatch = useDispatch();\n  const { walletAddress } = useSelector((state: RootState) => state.auth);\n  const { totalSquats, todayCount, dailyGoal, bestStreak, lastSessionDate } = useSelector(\n    (state: RootState) => state.squats || { totalSquats: 0, todayCount: 0, dailyGoal: 30, bestStreak: 0, lastSessionDate: null }\n  );\n  const { callApi, loading, error } = useApiCall(getDashboardData);\n  const [newGoal, setNewGoal] = useState(dailyGoal);\n\n  // ✅ 데이터 로딩 최적화 (async/await 사용)\n  useEffect(() => {\n    const fetchData = async () => {\n      const data = await callApi();\n      if (data) dispatch(setDashboardData(data));\n    };\n    fetchData();\n  }, [dispatch, callApi]);\n\n  // ✅ 목표 변경 및 Redux & 로컬 스토리지 업데이트\n  const handleGoalChange = () => {\n    if (newGoal > 0) {\n      dispatch(setDailyGoal(newGoal));\n      localStorage.setItem('dailyGoal', newGoal.toString()); // ✅ 로컬 스토리지 동기화\n      alert(`✅ 운동 목표가 ${newGoal}회로 설정되었습니다.`);\n    }\n  };\n\n  // ✅ 마지막 운동 날짜 변환 (YYYY-MM-DD)\n  const formattedLastSessionDate = lastSessionDate ? new Date(lastSessionDate).toISOString().split('T')[0] : '기록 없음';\n\n  return (\n    <Container>\n      <Title>🏋️‍♂️ 대시보드</Title>\n\n      {/* ✅ API 로딩 상태 표시 */}\n      {loading && <p>⏳ 데이터 불러오는 중...</p>}\n      {error && <p style={{ color: 'red' }}>❌ 데이터 로딩 실패: {typeof error === 'object' && error !== null ? (error as Error).message : JSON.stringify(error)}</p>}\n\n      {/* ✅ 운동 기록 정보 */}\n      {!loading && !error && (\n        <>\n          <Info>🔹 내 지갑 주소: {walletAddress ? `${walletAddress.slice(0, 4)}...${walletAddress.slice(-4)}` : '연결되지 않음'}</Info>\n          <Info>🔥 총 운동 횟수: <strong>{totalSquats} 회</strong></Info>\n          <Info>🏆 최고 연속 운동 기록: <strong>{bestStreak} 일</strong></Info>\n          <Info>📅 마지막 운동 날짜: <strong>{formattedLastSessionDate}</strong></Info>\n\n          {/* ✅ 운동 진행률 ProgressBar */}\n          <ProgressBar progress={Math.min((todayCount / dailyGoal) * 100, 100)} />\n          <Info>📊 오늘 운동: <strong>{todayCount}/{dailyGoal} 회</strong></Info>\n\n          {/* ✅ 목표 변경 UI */}\n          <div>\n            <label>\n              🎯 목표 설정:\n              <Input type=\"number\" value={newGoal} onChange={(e) => setNewGoal(Number(e.target.value))} />\n            </label>\n            <Button onClick={handleGoalChange}>목표 변경</Button>\n          </div>\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default Dashboard;\n","import { useState } from 'react';\n\nexport function useApiCall<T>(apiFunction: (...args: any[]) => Promise<T>) {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const callApi = async (...args: any[]): Promise<T> => {\n    setLoading(true);\n    try {\n      const result = await apiFunction(...args);\n      return result;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { callApi, loading, error };\n}\n"],"names":["Container","styled","div","Title","h1","props","theme","colors","primary","Info","p","text","Input","input","Button","button","primaryHover","Dashboard","dispatch","useDispatch","walletAddress","useSelector","state","auth","totalSquats","todayCount","dailyGoal","bestStreak","lastSessionDate","squats","callApi","loading","error","useApiCall","getDashboardData","newGoal","setNewGoal","useState","useEffect","async","data","setDashboardData","fetchData","formattedLastSessionDate","Date","toISOString","split","_jsxs","children","_jsx","style","color","message","JSON","stringify","_Fragment","slice","ProgressBar","progress","Math","min","type","value","onChange","e","Number","target","onClick","handleGoalChange","setDailyGoal","localStorage","setItem","toString","alert","apiFunction","setLoading","setError","arguments","err","Error"],"sourceRoot":""}